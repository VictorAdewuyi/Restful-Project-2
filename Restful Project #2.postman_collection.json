{
	"info": {
		"_postman_id": "35e63741-85c3-406c-a4db-5a7e818c7b16",
		"name": "Restful Project #2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33953301",
		"_collection_link": "https://api-automation-2490.postman.co/workspace/ATB6xBATCH~fb98cbf6-30d7-47e7-b4a5-3259b9aaccb1/collection/33953301-35e63741-85c3-406c-a4db-5a7e818c7b16?action=share&source=collection_link&creator=33953301"
	},
	"item": [
		{
			"name": "TC_POST",
			"item": [
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Java script Format ",
									"// JS -> POSTMAN modifed JS - which you need ",
									"// to learn to write the testcase.",
									"",
									"// Write the Test case you need to understand",
									"// Javascript Basics",
									"// ChaiJS assertion",
									"// functions in JS",
									"// JSON in JS",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// Test to check the length of the response data",
									"pm.test(\"Response data length is greater than zero\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Object.keys(responseData).length).to.be.greaterThan(0, \"Response data should not be empty\");",
									"});",
									"",
									"// Test to check the content type of the response",
									"pm.test(\"Response has content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Response schema validation for bookingid, booking, firstname, lastname, totalprice, depositpaid, bookingdates, checkin, checkout, and additionalneeds\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.bookingid).to.be.a('number');",
									"    pm.expect(responseData.booking).to.be.an('object');",
									"    pm.expect(responseData.booking.firstname).to.be.a('string');",
									"    pm.expect(responseData.booking.lastname).to.be.a('string');",
									"    pm.expect(responseData.booking.totalprice).to.be.a('number');",
									"    pm.expect(responseData.booking.depositpaid).to.be.a('boolean');",
									"    pm.expect(responseData.booking.bookingdates).to.be.an('object');",
									"    pm.expect(responseData.booking.bookingdates.checkin).to.be.a('string');",
									"    pm.expect(responseData.booking.bookingdates.checkout).to.be.a('string');",
									"    pm.expect(responseData.booking.additionalneeds).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Java script before making a request",
									"console.log(\"Before Request\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/125.0.2535.92",
								"disabled": true
							},
							{
								"key": "key",
								"value": "val",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "query",
									"value": "pramod",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Booking TC REAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify that response of the create booking is valid\", function () {",
									"    var statusCode = pm.response.code;",
									"    console.log(statusCode)",
									"    pm.expect(statusCode).to.be.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Verfiy the bookingId\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[\"bookingid\"]).not.to.be.null;",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Verfiy the firstname\", function () {",
									"    var responseData = pm.response.json();",
									"    var firstnameData = responseData[\"booking\"][\"firstname\"];",
									"",
									"    pm.expect(firstnameData).not.to.be.null;",
									"    pm.expect(firstnameData).to.be.equal(\"Jim\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/125.0.2535.92",
								"disabled": true
							},
							{
								"key": "key",
								"value": "val",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "query",
									"value": "pramod",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single BOOKING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking/569",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"569"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IntegrationTC",
			"item": [
				{
					"name": "TC#1 - Create, Update, Get",
					"item": [
						{
							"name": "Step1 - Create Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Java script Format ",
											"// JS -> POSTMAN modifed JS - which you need ",
											"// to learn to write the testcase.",
											"",
											"// Write the Test case you need to understand",
											"// Javascript Basics",
											"// ChaiJS assertion",
											"// functions in JS",
											"// JSON in JS",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"tc_bookingid\", pm.response.json()[\"bookingid\"]);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"// Test to check the length of the response data",
											"pm.test(\"Response data length is greater than zero\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(Object.keys(responseData).length).to.be.greaterThan(0, \"Response data should not be empty\");",
											"});",
											"",
											"// Test to check the content type of the response",
											"pm.test(\"Response has content type of application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"pm.test(\"Response schema validation for bookingid, booking, firstname, lastname, totalprice, depositpaid, bookingdates, checkin, checkout, and additionalneeds\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.bookingid).to.be.a('number');",
											"    pm.expect(responseData.booking).to.be.an('object');",
											"    pm.expect(responseData.booking.firstname).to.be.a('string');",
											"    pm.expect(responseData.booking.lastname).to.be.a('string');",
											"    pm.expect(responseData.booking.totalprice).to.be.a('number');",
											"    pm.expect(responseData.booking.depositpaid).to.be.a('boolean');",
											"    pm.expect(responseData.booking.bookingdates).to.be.an('object');",
											"    pm.expect(responseData.booking.bookingdates.checkin).to.be.a('string');",
											"    pm.expect(responseData.booking.bookingdates.checkout).to.be.a('string');",
											"    pm.expect(responseData.booking.additionalneeds).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Java script before making a request",
											"console.log(\"Before Request\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/125.0.2535.92",
										"disabled": true
									},
									{
										"key": "key",
										"value": "val",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "query",
											"value": "pramod",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step2 - Full Update Booking Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 123,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2024-01-01\",\n        \"checkout\" : \"2024-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast,lunch\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/booking/{{tc_bookingid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{tc_bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step3 - Get Single BOOKING",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Response time is less than 1500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/booking/{{tc_bookingid}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"booking",
										"{{tc_bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC#2 - Create, Delete, GET",
					"item": []
				},
				{
					"name": "TC#3 - Create a BOOKING, Delete It",
					"item": []
				}
			]
		},
		{
			"name": "Auth Req.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the Status Code.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.environment.set(\"token\", pm.response.json()[\"token\"]);",
							"});",
							"",
							"pm.test(\"Token should not be null\", function () {",
							"    pm.expect(pm.response.json()[\"token\"]).not.to.be.null;",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Req. TC1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the Status Code.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.environment.set(\"token\", pm.response.json()[\"token\"]);",
							"});",
							"",
							"pm.test(\"Token should not be null\", function () {",
							"    pm.expect(pm.response.json()[\"token\"]).not.to.be.null;",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"admmin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking Negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/125.0.2535.92",
						"disabled": true
					},
					{
						"key": "key",
						"value": "val",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "query",
							"value": "pramod",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking TC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// console.log(\"Hello World\");",
							"",
							"// console.log(pm.info.requestName);",
							"// console.log(pm.response.text());",
							"console.log(pm.response.json());",
							"",
							"var responseData = pm.response.json();",
							"console.log(responseData[\"bookingid\"]);",
							"console.log(responseData[\"booking\"][\"firstname\"]);",
							"console.log(responseData[\"booking\"][\"lastname\"]);",
							"console.log(responseData[\"booking\"][\"bookingdates\"][\"checkin\"]);",
							"",
							"",
							"",
							"// Expect Result == Actual Result ",
							"",
							"// responseData[\"bookingid\"] shoul not null",
							"// responseData[\"bookingid\"] > 0",
							"// responseData[\"bookingid\"] == 7272",
							"",
							"",
							"// Assertion",
							"//pm.expect(\"Expected Result\").to.equal(\"Actual Result\")",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // Java script before making a request",
							"// console.log(\"Before Request\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/125.0.2535.92",
						"disabled": true
					},
					{
						"key": "key",
						"value": "val",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "query",
							"value": "pramod",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Full Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 123,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2024-01-01\",\n        \"checkout\" : \"2024-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast,lunch\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Booking",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"Pramod\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Created Response validation\", function () {",
							"    var textData = pm.response.text();",
							"    pm.expect(textData).to.eql(\"Created\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/ping",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}